"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = __importDefault(require("."));
var request_service_1 = __importDefault(require("../../common/request_service"));
var requests_1 = require("./requests");
var Transaction = {
    /**
     * Create a new Transaccion Completa transaction
     * @param buyOrder Commerce buy order, make sure this is unique.
     * @param sessionId You can use this field to pass session data if needed.
     * @param amount Transaction amount
     * @param cvv Card verification value
     * @param cardNumber Card's fron number
     * @param cardExpirationDate Card's expiration date
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    create: function (buyOrder, sessionId, amount, cvv, cardNumber, cardExpirationDate, options) {
        if (options === void 0) { options = _1.default.getDefaultOptions(); }
        return __awaiter(void 0, void 0, void 0, function () {
            var createRequest;
            return __generator(this, function (_a) {
                createRequest = new requests_1.CreateRequest(buyOrder, sessionId, amount, cvv, cardNumber.replace(/\s/g, ''), cardExpirationDate.replace(/\s/g, ''));
                return [2 /*return*/, request_service_1.default.perform(createRequest, options)];
            });
        });
    },
    /**
     * Ask for installment conditions and price
     * @param token Unique transaction identifier
     * @param installmentsNumber Number of installments to ask for
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    installments: function (token, installmentsNumber, options) {
        if (options === void 0) { options = _1.default.getDefaultOptions(); }
        return __awaiter(void 0, void 0, void 0, function () {
            var installmentsRequest;
            return __generator(this, function (_a) {
                installmentsRequest = new requests_1.InstallmentsRequest(token, installmentsNumber);
                return [2 /*return*/, request_service_1.default.perform(installmentsRequest, options)];
            });
        });
    },
    /**
     * Commit a transaction
     * @param token Unique transaction identifier
     * @param idQueryInstallments (Optional) Use this when paying with installments, get it from
     * installments method.
     * @param deferredPeriodIndex (Optional) Use this when paying with installments, you can use this
     * if the commerce is configured to offer deferred payment
     * @param gracePeriod (Optional) Use this when paying with installments, this indicates if there's
     * a grace period.
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    commit: function (token, idQueryInstallments, deferredPeriodIndex, gracePeriod, options) {
        if (idQueryInstallments === void 0) { idQueryInstallments = undefined; }
        if (deferredPeriodIndex === void 0) { deferredPeriodIndex = undefined; }
        if (gracePeriod === void 0) { gracePeriod = undefined; }
        if (options === void 0) { options = _1.default.getDefaultOptions(); }
        return __awaiter(void 0, void 0, void 0, function () {
            var commitRequest;
            return __generator(this, function (_a) {
                commitRequest = new requests_1.CommitRequest(token, idQueryInstallments, deferredPeriodIndex, gracePeriod);
                return [2 /*return*/, request_service_1.default.perform(commitRequest, options)];
            });
        });
    },
    /**
     * Obtain the status of a specific transaction
     * @param token Unique transaction identifier
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    status: function (token, options) {
        if (options === void 0) { options = _1.default.getDefaultOptions(); }
        return __awaiter(void 0, void 0, void 0, function () {
            var statusRequest;
            return __generator(this, function (_a) {
                statusRequest = new requests_1.StatusRequest(token);
                return [2 /*return*/, request_service_1.default.perform(statusRequest, options)];
            });
        });
    },
    /**
     * Request a refund of a specific transaction, if you refund for the full amount and you're within
     * the time window the transaction will be reversed. If you're past that window or refund for less
     * than the total amount the transaction will be void.
     * @param token Unique transaction identifier
     * @param amount Amount to be refunded
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    refund: function (token, amount, options) {
        if (options === void 0) { options = _1.default.getDefaultOptions(); }
        return __awaiter(void 0, void 0, void 0, function () {
            var refundRequest;
            return __generator(this, function (_a) {
                refundRequest = new requests_1.RefundRequest(token, amount);
                return [2 /*return*/, request_service_1.default.perform(refundRequest, options)];
            });
        });
    },
};
exports.default = Transaction;
