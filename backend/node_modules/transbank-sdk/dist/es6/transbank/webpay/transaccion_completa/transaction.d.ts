import Options from '../../common/options';
declare const Transaction: {
    /**
     * Create a new Transaccion Completa transaction
     * @param buyOrder Commerce buy order, make sure this is unique.
     * @param sessionId You can use this field to pass session data if needed.
     * @param amount Transaction amount
     * @param cvv Card verification value
     * @param cardNumber Card's fron number
     * @param cardExpirationDate Card's expiration date
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    create: (buyOrder: string, sessionId: string, amount: number, cvv: number | undefined, cardNumber: string, cardExpirationDate: string, options?: Options) => Promise<any>;
    /**
     * Ask for installment conditions and price
     * @param token Unique transaction identifier
     * @param installmentsNumber Number of installments to ask for
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    installments: (token: string, installmentsNumber: number, options?: Options) => Promise<any>;
    /**
     * Commit a transaction
     * @param token Unique transaction identifier
     * @param idQueryInstallments (Optional) Use this when paying with installments, get it from
     * installments method.
     * @param deferredPeriodIndex (Optional) Use this when paying with installments, you can use this
     * if the commerce is configured to offer deferred payment
     * @param gracePeriod (Optional) Use this when paying with installments, this indicates if there's
     * a grace period.
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    commit: (token: string, idQueryInstallments?: number | undefined, deferredPeriodIndex?: number | undefined, gracePeriod?: boolean | undefined, options?: Options) => Promise<any>;
    /**
     * Obtain the status of a specific transaction
     * @param token Unique transaction identifier
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    status: (token: string, options?: Options) => Promise<any>;
    /**
     * Request a refund of a specific transaction, if you refund for the full amount and you're within
     * the time window the transaction will be reversed. If you're past that window or refund for less
     * than the total amount the transaction will be void.
     * @param token Unique transaction identifier
     * @param amount Amount to be refunded
     * @param options (Optional) You can pass options to use a custom configuration for this request.
     */
    refund: (token: string, amount: number, options?: Options) => Promise<any>;
};
export default Transaction;
